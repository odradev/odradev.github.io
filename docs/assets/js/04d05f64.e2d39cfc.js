"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[5829],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},d=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(h,s(s({ref:e},d),{},{components:n})):a.createElement(h,s({ref:e},d))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98877:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:7,description:"How to write tests in Odra"},s="Testing",i={unversionedId:"basics/testing",id:"version-2.1.0/basics/testing",title:"Testing",description:"How to write tests in Odra",source:"@site/versioned_docs/version-2.1.0/basics/07-testing.md",sourceDirName:"basics",slug:"/basics/testing",permalink:"/docs/2.1.0/basics/testing",draft:!1,tags:[],version:"2.1.0",lastUpdatedAt:1752056444,formattedLastUpdatedAt:"Jul 9, 2025",sidebarPosition:7,frontMatter:{sidebar_position:7,description:"How to write tests in Odra"},sidebar:"tutorialSidebar",previous:{title:"Host Communication",permalink:"/docs/2.1.0/basics/communicating-with-host"},next:{title:"Errors",permalink:"/docs/2.1.0/basics/errors"}},l={},c=[{value:"HostEnv",id:"hostenv",level:2},{value:"What&#39;s next",id:"whats-next",level:2}],d={toc:c};function p(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Thanks to the Odra framework, you can test your code in any way you are used to. This means you can write\nregular Rust unit and integration tests. Have a look at how we test the Dog Contract we created in the\nprevious article:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/storage/list.rs"',title:'"examples/src/features/storage/list.rs"'},'use odra::prelude::*;\n\n#[cfg(test)]\nmod tests {\n    use super::{DogContract3, DogContract3InitArgs};\n    use odra::{host::Deployer, prelude::*};\n\n    #[test]\n    fn init_test() {\n        let test_env = odra_test::env();\n        let init_args = DogContract3InitArgs {\n            name: "DogContract".to_string()\n        };\n        let mut dog_contract = DogContract3::deploy(&test_env, init_args);\n        assert_eq!(dog_contract.walks_amount(), 0);\n        assert_eq!(dog_contract.walks_total_length(), 0);\n        dog_contract.walk_the_dog(5);\n        dog_contract.walk_the_dog(10);\n        assert_eq!(dog_contract.walks_amount(), 2);\n        assert_eq!(dog_contract.walks_total_length(), 15);\n    }\n}\n')),(0,r.kt)("p",null,"The first interesting thing you may notice is placed the import section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use super::{DogContract3, DogContract3InitArgs};\nuse odra::{host::Deployer, prelude::*};\n")),(0,r.kt)("p",null,"We are using ",(0,r.kt)("inlineCode",{parentName:"p"},"super")," to import the ",(0,r.kt)("inlineCode",{parentName:"p"},"DogContract3")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DogContract3InitArgs")," from the parent module.\n",(0,r.kt)("inlineCode",{parentName:"p"},"{{ModuleName}}InitArgs")," is a type that was generated for us by Odra, alongside with the code in the\ncode inside ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ModuleName}}"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DogContract3InitArgs")," is a struct that we use to initialize the contract and implements ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/odra/2.1.0/odra/host/trait.InitArgs.html"},(0,r.kt)("inlineCode",{parentName:"a"},"InitArgs"))," trait.\nConsidering the contract initialization, there three possible scenarios:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The contract has a constructor with arguments, then Odra creates a struct named ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ModuleName}}InitArgs"),"."),(0,r.kt)("li",{parentName:"ol"},"The contract has a constructor with no arguments, then you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"odra::host::NoArgs"),"."),(0,r.kt)("li",{parentName:"ol"},"The contract does not have a constructor, then you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"odra::host::NoArgs"),".\nAll of those structs implement the ",(0,r.kt)("inlineCode",{parentName:"li"},"odra::host::InitArgs")," trait, required to conform to the\n",(0,r.kt)("inlineCode",{parentName:"li"},"Deployer::deploy")," method signature. ")),(0,r.kt)("p",null,"The other import is ",(0,r.kt)("inlineCode",{parentName:"p"},"odra::host::Deployer"),". This is a trait is used to deploy the contract and give us a reference to it."),(0,r.kt)("p",null,"Let's take a look at the test itself. How to obtain a reference to the contract?\n",(0,r.kt)("inlineCode",{parentName:"p"},"{{ModuleName}}")," implements the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/odra/2.1.0/odra/host/trait.Deployer.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Deployer"))," trait, which provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/storage/list.rs"',title:'"examples/src/features/storage/list.rs"'},"let mut dog_contract = DogContract3::deploy(&test_env, init_args);\n")),(0,r.kt)("p",null,"From now on, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"dog_contract")," to interact with our deployed contract.\nIts type is ",(0,r.kt)("inlineCode",{parentName:"p"},"DogContract3HostRef"),", which is a reference to the contract that we can use to interact with it (call entrypoints)\nand implements ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/odra/2.1.0/odra/host/trait.HostRef.html"},(0,r.kt)("inlineCode",{parentName:"a"},"HostRef"))," trait.\nIn particular, all\n",(0,r.kt)("inlineCode",{parentName:"p"},"pub")," functions from the impl section\nthat was annotated with the ",(0,r.kt)("inlineCode",{parentName:"p"},"odra::module")," attribute are available to us in this type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/storage/list.rs"',title:'"examples/src/features/storage/list.rs"'},"// Impl\npub fn walk_the_dog(&mut self, length: u32) {\n    self.walks.push(length);\n}\n\n...\n\n// Test\ndog_contract.walk_the_dog(5);\n")),(0,r.kt)("h2",{id:"hostenv"},"HostEnv"),(0,r.kt)("p",null,"Odra gives us some additional functions that we can use to communicate with the host (outside the contract context)\nand to configure how the contracts are deployed and called. Let's revisit the example from the previous\narticle about host communication and implement the tests that prove it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/testing.rs"',title:'"examples/src/features/testing.rs"'},'#[cfg(test)]\nmod tests {\n    use crate::features::testing::{TestingContract, TestingContractInitArgs};\n    use odra::{host::{Deployer, HostEnv}, prelude::*};\n\n    #[test]\n    fn env() {\n        let test_env: HostEnv = odra_test::env();\n        test_env.set_caller(test_env.get_account(0));\n        let init_args = TestingContractInitArgs {\n            name: "MyContract".to_string()\n        };\n        let testing_contract = TestingContract::deploy(&test_env, init_args);\n        let creator = testing_contract.created_by();\n        test_env.set_caller(test_env.get_account(1));\n        let init_args = TestingContractInitArgs {\n            name: "MyContract2".to_string()\n        };\n        let testing_contract2 = TestingContract::deploy(&test_env, init_args);\n        let creator2 = testing_contract2.created_by();\n        assert_ne!(creator, creator2);\n    }\n}\n')),(0,r.kt)("p",null,"In the code above, at the beginning of the test, we are obtaining a ",(0,r.kt)("inlineCode",{parentName:"p"},"HostEnv")," instance using ",(0,r.kt)("inlineCode",{parentName:"p"},"odra_test::env()"),".\nNext, we are deploying two instances of the same contract, but we're using ",(0,r.kt)("inlineCode",{parentName:"p"},"HostEnv::set_caller"),"\nto change the caller - so the Address which is deploying the contract. This changes the result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"odra::ContractEnv::caller()"),"\nthe function we are calling inside the contract."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HostEnv")," comes with a set of functions that will let you write better tests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fn set_caller(&self, address: Address)")," - you've seen it in action just now"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fn balance_of<T: Addressable>(&self, addr: &T) -> U512")," - returns the balance of the account associated with the given address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fn advance_block_time(&self, time_diff: u64)")," - increases the current value of ",(0,r.kt)("inlineCode",{parentName:"li"},"block_time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fn get_account(&self, n: usize) -> Address")," - returns an n-th address that was prepared for you by Odra in advance;\nby default, you start with the 0-th account"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fn emitted_event<T: ToBytes + EventInstance, R: Addressable>(&self, contract_address: &R, event: T) -> bool")," - verifies if the event was emitted by the contract")),(0,r.kt)("p",null,"Full list of functions can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/odra/2.1.0/odra/host/struct.HostEnv.html"},(0,r.kt)("inlineCode",{parentName:"a"},"HostEnv"))," documentation."),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("p",null,"We take a look at how Odra handles errors!"))}p.isMDXComponent=!0}}]);