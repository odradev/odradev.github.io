"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[2485],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,g=u["".concat(c,".").concat(d)]||u[d]||p[d]||o;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},17578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},i="Building contracts manually",l={unversionedId:"advanced/building-manually",id:"version-2.3.1/advanced/building-manually",title:"Building contracts manually",description:"cargo odra is a great tool to build and test your contracts, but sometimes",source:"@site/versioned_docs/version-2.3.1/advanced/06-building-manually.md",sourceDirName:"advanced",slug:"/advanced/building-manually",permalink:"/docs/advanced/building-manually",draft:!1,tags:[],version:"2.3.1",lastUpdatedAt:1756365684,formattedLastUpdatedAt:"Aug 28, 2025",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Memory allocators",permalink:"/docs/advanced/using-different-allocator"},next:{title:"Signatures",permalink:"/docs/advanced/signatures"}},c={},s=[{value:"Building the contract manually",id:"building-the-contract-manually",level:2},{value:"Optimizing the contract",id:"optimizing-the-contract",level:2},{value:"Running the tests manually",id:"running-the-tests-manually",level:2},{value:"Wrapping up",id:"wrapping-up",level:2}],m={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"building-contracts-manually"},"Building contracts manually"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cargo odra")," is a great tool to build and test your contracts, but sometimes\na better control over the parameters that are passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo"),"\nor the compiler is needed. "),(0,r.kt)("p",null,"This is especially useful when the project has multiple features, and there is a need\nto switch between them during the building and testing."),(0,r.kt)("p",null,"Knowing that ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo odra")," is a simple wrapper around ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo"),", it is easy to replicate\nthe same behavior by using ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo")," directly."),(0,r.kt)("h2",{id:"building-the-contract-manually"},"Building the contract manually"),(0,r.kt)("p",null,"To build the contract manually, ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo odra")," uses the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ODRA_MODULE=my_contract cargo build --release --target wasm32-unknown-unknown --bin my_project_build_contract\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Odra uses the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"ODRA_MODULE")," to determine which contract to build.")),(0,r.kt)("p",null,"Assuming that project's crate is named ",(0,r.kt)("inlineCode",{parentName:"p"},"my_project"),", this command will build\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"my_contract")," contract in release mode and generate the wasm file.\nThe file will be put into the ",(0,r.kt)("inlineCode",{parentName:"p"},"target/wasm32-unknown-unknown/release")," directory under\nthe name ",(0,r.kt)("inlineCode",{parentName:"p"},"my_project_build_contract.wasm"),"."),(0,r.kt)("p",null,"The Odra Framework expects the contracts to be placed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm")," directory, and\nto be named correctly, so the next step would be to move the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mv target/wasm32-unknown-unknown/release/my_project_build_contract.wasm wasm/my_contract.wasm\n")),(0,r.kt)("h2",{id:"optimizing-the-contract"},"Optimizing the contract"),(0,r.kt)("p",null,"To lower the size of the wasm file, ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo odra")," uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm-strip")," tool:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasm-strip wasm/my_contract.wasm\n")),(0,r.kt)("p",null,"To further optimize the wasm file, the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm-opt")," tool is also used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasm-opt --signext-lowering wasm/my_contract.wasm -o wasm/my_contract.wasm\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"This step is required, as the wasm file generated by the Rust compiler is not\nfully compatible with the Casper execution engine.")),(0,r.kt)("h2",{id:"running-the-tests-manually"},"Running the tests manually"),(0,r.kt)("p",null,"To run the tests manually, Odra needs to know which backend to use.\nTo run tests against Casper backend, the following command needs to be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ODRA_BACKEND=casper cargo test\n")),(0,r.kt)("h2",{id:"wrapping-up"},"Wrapping up"),(0,r.kt)("p",null,"Let's say we want to build the ",(0,r.kt)("inlineCode",{parentName:"p"},"my_contract")," in debug mode, run the tests against the\ncasper backend and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-own-allocator")," feature from our ",(0,r.kt)("inlineCode",{parentName:"p"},"my_project")," project."),(0,r.kt)("p",null,"To do that, we can use the following set of commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ODRA_MODULE=my_contract cargo build --target wasm32-unknown-unknown --bin my_project_build_contract\nmv target/wasm32-unknown-unknown/debug/my_project_build_contract.wasm wasm/my_contract.wasm\nwasm-strip wasm/my_contract.wasm\nwasm-opt --signext-lowering wasm/my_contract.wasm -o wasm/my_contract.wasm\nODRA_BACKEND=casper cargo test --features my-own-allocator\n")))}p.isMDXComponent=!0}}]);