"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[184],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(n),f=r,b=u["".concat(i,".").concat(f)]||u[f]||p[f]||o;return n?a.createElement(b,c(c({ref:t},l),{},{components:n})):a.createElement(b,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var d=2;d<o;d++)c[d]=n[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},29924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:11},c="Upgrading Contracts",s={unversionedId:"tutorials/upgrades",id:"tutorials/upgrades",title:"Upgrading Contracts",description:"This tutorial demonstrates how to upgrade a contract deployed on the Casper Livenet environment using Odra.",source:"@site/docs/tutorials/upgrades.md",sourceDirName:"tutorials",slug:"/tutorials/upgrades",permalink:"/docs/next/tutorials/upgrades",draft:!1,tags:[],version:"current",lastUpdatedAt:1756362595,formattedLastUpdatedAt:"Aug 28, 2025",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Deploying a Token on Casper Livenet",permalink:"/docs/next/tutorials/deploying-on-casper"},next:{title:"Odra CLI",permalink:"/docs/next/tutorials/odra-cli"}},i={},d=[{value:"Livenet Example",id:"livenet-example",level:2},{value:"Run the example",id:"run-the-example",level:2},{value:"Cspr.live",id:"csprlive",level:2},{value:"Conclusion",id:"conclusion",level:2}],l={toc:d};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upgrading-contracts"},"Upgrading Contracts"),(0,r.kt)("p",null,"This tutorial demonstrates how to upgrade a contract deployed on the Casper Livenet environment using Odra.\nIt is a continuation of the previous tutorial on ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/tutorials/deploying-on-casper"},"deploying contracts"),".\nIf you didn't follow the previous tutorial, please do so before continuing."),(0,r.kt)("h2",{id:"livenet-example"},"Livenet Example"),(0,r.kt)("p",null,"In this example, we will deploy a simple counter contract and then upgrade it to a new version with additional features.\nWe will skip the details of the contract implementation and focus on the deployment and upgrade process."),(0,r.kt)("p",null,"Our example deploys a simple counter contract making it upgradable and then upgrades it twice: first to ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterV2"),", and then back to ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterV1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/bin/upgrades_on_livenet.rs",title:"examples/bin/upgrades_on_livenet.rs"},"//! This example demonstrates how to deploy and upgrade a contract on the Livenet environment.\n\nuse odra::casper_types::U256;\nuse odra::host::{Deployer, HostRef, InstallConfig, NoArgs};\nuse odra_examples::features::upgrade::{CounterV1, CounterV2, CounterV2UpgradeArgs};\n\nfn main() {\n    let env = odra_casper_livenet_env::env();\n\n    env.set_gas(500_000_000_000u64);\n\n    // Contracts can be upgraded\n    let mut counter =\n        CounterV1::deploy_with_cfg(&env, NoArgs, InstallConfig::upgradable::<CounterV1>());\n\n    env.set_gas(50_000_000_000u64);\n    counter.increment();\n    assert_eq!(counter.get(), 1);\n\n    env.set_gas(500_000_000_000u64);\n    let mut counter2 = CounterV2::try_upgrade(\n        &env,\n        counter.contract_address(),\n        CounterV2UpgradeArgs { new_start: None }\n    )\n    .unwrap();\n\n    env.set_gas(50_000_000_000u64);\n    counter2.increment();\n    assert_eq!(counter2.get(), U256::from(2));\n\n    env.set_gas(500_000_000_000u64);\n    let mut counter3 = CounterV1::try_upgrade(&env, counter.contract_address(), NoArgs).unwrap();\n\n    env.set_gas(50_000_000_000u64);\n    counter3.increment();\n    assert_eq!(counter3.get(), 2);\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Deployer")," trait has two functions that allow upgrading contracts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"try_upgrade"),": upgrades a contract to a new version. It takes the environment, the address of the contract to be upgraded, and the arguments for the new version of the contract. The function "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"try_upgrade_with_cfg"),": same as ",(0,r.kt)("inlineCode",{parentName:"li"},"try_upgrade"),", but allows specifying a custom ",(0,r.kt)("a",{parentName:"li",href:"https://docs.rs/odra/2.3.0/odra/host/struct.UpgradeConfig.html"},"upgrade configuration"),".")),(0,r.kt)("p",null,"Let's take a quick look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterV2")," implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[odra::module]\nimpl CounterV2 {\n    pub fn init(&mut self, start_from: Option<U256>) {\n        if let Some(start) = start_from {\n            self.new_counter.set(start);\n        } else {\n            self.new_counter.set(U256::from(0));\n        }\n    }\n\n    pub fn upgrade(&mut self, new_start: Option<U256>) {\n        if let Some(start) = new_start {\n            self.new_counter.set(start);\n        } else {\n            // If no new value is provided, we keep the current value\n            self.new_counter.set(self.counter.get_or_default().into());\n        }\n    }\n\n    ...\n}\n")),(0,r.kt)("p",null,"The contract implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"upgrade")," function, which allows executing the upgrade logic for the contract. When upgrading to a new version, the ",(0,r.kt)("inlineCode",{parentName:"p"},"upgrade")," function is called with the new initialization parameters. We call the ",(0,r.kt)("inlineCode",{parentName:"p"},"try_upgrade")," function with ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterV2UpgradeArgs")," - a struct ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/odra/2.3.0/odra/host/trait.UpgradeArgs.html"},"automatically generated")," by the Odra framework. It is a mirror feature of the contract's initialization parameters."),(0,r.kt)("h2",{id:"run-the-example"},"Run the example"),(0,r.kt)("p",null,"Now, let's see the code in action!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin our_token_livenet --features livenet\n")),(0,r.kt)("p",null,"A sample output of the program might look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.11s\n     Running `../target/debug/upgrade_on_livenet`\n\ud83d\udc81  INFO : Found wasm under "/Users/kpob/workspace/odra/examples/wasm/CounterV1.wasm".\n\ud83d\udc81  INFO : Deploying "CounterV1".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(301469239d731d7b7ca9aef7a42dcb1473a1388d59e1bac619a008e7b555aa0d)).\n\ud83d\udc81  INFO : Transaction "301469239d731d7b7ca9aef7a42dcb1473a1388d59e1bac619a008e7b555aa0d" successfully executed.\n\ud83d\udd17  LINK : https://testnet.cspr.live/transaction/301469239d731d7b7ca9aef7a42dcb1473a1388d59e1bac619a008e7b555aa0d\n\ud83d\udc81  INFO : Contract "contract-package-b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12" deployed.\n\ud83d\udc81  INFO : Calling "contract-package-b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12" directly with entrypoint "increment".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(a0fb180018063702094cdd66bdda1a3eda6f90c2e726334f202d77cddd88e649)).\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(a0fb180018063702094cdd66bdda1a3eda6f90c2e726334f202d77cddd88e649)).\n\ud83d\udc81  INFO : Transaction "a0fb180018063702094cdd66bdda1a3eda6f90c2e726334f202d77cddd88e649" successfully executed.\n\ud83d\udd17  LINK : https://testnet.cspr.live/transaction/a0fb180018063702094cdd66bdda1a3eda6f90c2e726334f202d77cddd88e649\n\ud83d\udc81  INFO : Found wasm under "/Users/kpob/workspace/odra/examples/wasm/CounterV2.wasm".\n\ud83d\udc81  INFO : Deploying "CounterV2".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(ec4518f51a2b3ed19886d6cd2d67e138aeb24834362d8fad8adb4af45fa36f21)).\n\ud83d\udc81  INFO : Transaction "ec4518f51a2b3ed19886d6cd2d67e138aeb24834362d8fad8adb4af45fa36f21" successfully executed.\n\ud83d\udd17  LINK : https://testnet.cspr.live/transaction/ec4518f51a2b3ed19886d6cd2d67e138aeb24834362d8fad8adb4af45fa36f21\n\ud83d\udc81  INFO : Contract "contract-package-b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12" deployed.\n\ud83d\udc81  INFO : Calling "contract-package-b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12" directly with entrypoint "increment".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(cc694727bf166c55e2080578fcf6dc944e2d9b931b8301fe5208c8e29e8c599a)).\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(cc694727bf166c55e2080578fcf6dc944e2d9b931b8301fe5208c8e29e8c599a)).\n\ud83d\udc81  INFO : Transaction "cc694727bf166c55e2080578fcf6dc944e2d9b931b8301fe5208c8e29e8c599a" successfully executed.\n\ud83d\udd17  LINK : https://testnet.cspr.live/transaction/cc694727bf166c55e2080578fcf6dc944e2d9b931b8301fe5208c8e29e8c599a\n\ud83d\udc81  INFO : Found wasm under "/Users/kpob/workspace/odra/examples/wasm/CounterV1.wasm".\n\ud83d\udc81  INFO : Deploying "CounterV1".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(58453efdf683f2271f558a22e406631edccff2771867069c2cbefb3386fc8833)).\n\ud83d\udc81  INFO : Transaction "58453efdf683f2271f558a22e406631edccff2771867069c2cbefb3386fc8833" successfully executed.\n\ud83d\udd17  LINK : https://testnet.cspr.live/transaction/58453efdf683f2271f558a22e406631edccff2771867069c2cbefb3386fc8833\n\ud83d\udc81  INFO : Contract "contract-package-b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12" deployed.\n\ud83d\udc81  INFO : Calling "contract-package-b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12" directly with entrypoint "increment".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(5cd3920e6b7cab505e074eb5684cc1b191841d2f24a889079d9fb1a92167fd4f)).\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(5cd3920e6b7cab505e074eb5684cc1b191841d2f24a889079d9fb1a92167fd4f)).\n\ud83d\udc81  INFO : Transaction "5cd3920e6b7cab505e074eb5684cc1b191841d2f24a889079d9fb1a92167fd4f" successfully executed.\n\ud83d\udd17  LINK : https://testnet.cspr.live/transaction/5cd3920e6b7cab505e074eb5684cc1b191841d2f24a889079d9fb1a92167fd4f\n')),(0,r.kt)("h2",{id:"csprlive"},"Cspr.live"),(0,r.kt)("p",null,"Let's take a look at cspr.live: ",(0,r.kt)("a",{parentName:"p",href:"https://testnet.cspr.live/contract-package/b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12"},"https://testnet.cspr.live/contract-package/b8b5003fe3ba05b4cae2e8acaeb777520e025958e12bd15394bf42e96f3f7b12")),(0,r.kt)("p",null,"It works! Now our contracts has three versions deployed:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"versions.png",src:n(90662).Z,width:"1176",height:"298"})),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this tutorial, we learned how to upgrade a smart contract on the blockchain using the Odra framework. We deployed a simple counter contract, made it upgradable, and then upgraded it twice: first to ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterV2"),", and then back to ",(0,r.kt)("inlineCode",{parentName:"p"},"CounterV1"),". We also explored the testnet to verify our contract deployments."))}p.isMDXComponent=!0},90662:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/versions-b492c23767ad871ce0575ef840b1d92b.png"}}]);