"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[1111],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,g=u["".concat(i,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(g,l(l({ref:n},d),{},{components:t})):a.createElement(g,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},90689:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={},l="Odra CLI",c={unversionedId:"tutorials/odra-cli",id:"version-2.0.1/tutorials/odra-cli",title:"Odra CLI",description:"The Odra CLI library allows creating cli clients for your contracts. Instead of using casper-client with",source:"@site/versioned_docs/version-2.0.1/tutorials/odra-cli.md",sourceDirName:"tutorials",slug:"/tutorials/odra-cli",permalink:"/docs/2.0.1/tutorials/odra-cli",draft:!1,tags:[],version:"2.0.1",lastUpdatedAt:1752055773,formattedLastUpdatedAt:"Jul 9, 2025",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deploying a Token on Casper Livenet",permalink:"/docs/2.0.1/tutorials/deploying-on-casper"},next:{title:"Migrations",permalink:"/docs/2.0.1/category/migrations"}},i={},s=[{value:"Deploy script",id:"deploy-script",level:2},{value:"How to use it",id:"how-to-use-it",level:2},{value:"Calling contract methods",id:"calling-contract-methods",level:2},{value:"Creating and running a scenario",id:"creating-and-running-a-scenario",level:2}],d={toc:s};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"odra-cli"},"Odra CLI"),(0,r.kt)("p",null,"The Odra CLI library allows creating cli clients for your contracts. Instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"casper-client")," with\ncomplex incantations, you can use the Odra CLI library to create a client that will be able to call your contract methods\ndirectly, by name, and with the correct arguments."),(0,r.kt)("h2",{id:"deploy-script"},"Deploy script"),(0,r.kt)("p",null,'Let\'s go through an example available in the odra repository to see how to use the Odra CLI library.\nIt creates a cli tool for a useful "DogContract".'),(0,r.kt)("p",null,"To use the Odra CLI library in your project, you need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"odra-cli")," to your ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file, alongside a new binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\n...\nodra-cli = "2"\n...\n\n[[bin]]\nname = "odra-cli"\npath = "src/bin/odra-cli.rs"\n')),(0,r.kt)("p",null,"Then, create a new file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/bin")," directory named ",(0,r.kt)("inlineCode",{parentName:"p"},"odra-cli.rs"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// Deploys the `DogContract` and adds it to the container.\npub struct DeployDogScript;\nimpl DeployScript for DeployDogScript {\n    fn deploy(\n        &self,\n        env: &HostEnv,\n        container: &mut DeployedContractsContainer\n    ) -> Result<(), odra_cli::deploy::Error> {\n        env.set_gas(350_000_000_000);\n        let dog_contract = DogContract::try_deploy(\n            env,\n            DogContractInitArgs {\n                barks: true,\n                weight: 10,\n                name: "Mantus".to_string()\n            }\n        )?;\n\n        container.add_contract(&dog_contract)?;\n\n        Ok(())\n    }\n}\n\n/// Main function to run the CLI tool.\npub fn main() {\n    OdraCli::new()\n        .about("Dog contract cli tool")\n        .deploy(DeployDogScript)\n        .contract::<DogContract>()\n        .build()\n        .run();\n}\n')),(0,r.kt)("p",null,"In the example above, we see an implementation of a simple DeployScript for our DogContract. It sets the gas limit,\ndeploys the contract and adds it to a container. The main function creates a new OdraCli instance, and sets the deploy script,\nmaking it available for the user."),(0,r.kt)("h2",{id:"how-to-use-it"},"How to use it"),(0,r.kt)("p",null,"Assuming the correct ",(0,r.kt)("a",{parentName:"p",href:"/docs/2.0.1/backends/livenet"},"livenet")," environment is set up, you can run the cli tool using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra-cli\n")),(0,r.kt)("p",null,"Which will display all of our options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Dog contract cli tool\n\nUsage: odra_cli <COMMAND>\n\nCommands:\n  deploy    Runs the deploy script\n  contract  Commands for interacting with contracts\n  scenario  Commands for running user-defined scenarios\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n")),(0,r.kt)("p",null,"First, we need to deploy the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra_cli deploy\n")),(0,r.kt)("p",null,"Which gives us an output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cargo run --bin odra_cli -- deploy\n   Compiling odra-examples v2.0.0 (/home/kuba/Projekty/odra/odra/examples)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.65s\n     Running `../target/debug/odra_cli deploy`\n\ud83d\udc81  INFO : Found wasm under "wasm/DogContract.wasm".\n\ud83d\udc81  INFO : Deploying "DogContract".\n\ud83d\ude44  WAIT : Waiting 10 for V1(TransactionV1Hash(10ce0134ac3a67772a668bb6c32a0dc74c09278f44d7896cc5419b8e2b2de33e)).                                                                                          \n\ud83d\udc81  INFO : Deploy "10ce0134ac3a67772a668bb6c32a0dc74c09278f44d7896cc5419b8e2b2de33e" successfully executed.                                                                                                 \n\ud83d\udc81  INFO : Contract "contract-package-3e1e053c2e9377e823d9156e0663b7614f74eb524d47d9dc4a621f8cd06a357b" deployed.                                                                                           \n\ud83d\udc81  INFO : Command executed successfully\n')),(0,r.kt)("p",null,"This will run the deploy script, and create a new file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," directory named ",(0,r.kt)("inlineCode",{parentName:"p"},"deployed-contracts.toml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'time = "2025-05-22T14:40:31Z"\n\n[[contracts]]\nname = "DogContract"\npackage_hash = "hash-3e1e053c2e9377e823d9156e0663b7614f74eb524d47d9dc4a621f8cd06a357b"\n')),(0,r.kt)("p",null,"All the calls to the contract will be made using this package hash."),(0,r.kt)("h2",{id:"calling-contract-methods"},"Calling contract methods"),(0,r.kt)("p",null,"To call a contract method, we need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract")," command. The command itself will display all the available contracts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra_cli -- contract\n")),(0,r.kt)("p",null,"Which outputs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Commands for interacting with contracts\n\nUsage: odra_cli contract <COMMAND>\n\nCommands:\n  DogContract  Commands for interacting with the DogContract contract\n  help         Print this message or the help of the given subcommand(s)\n")),(0,r.kt)("p",null,"And when contract is selected, it will show us the available methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra_cli -- contract DogContract\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Commands for interacting with the DogContract contract\n\nUsage: odra_cli contract DogContract <COMMAND>\n\nCommands:\n  barks               Returns true if the dog barks.\n  weight              Returns the dog's weight.\n  name                Returns the dog's name.\n  walks_amount        Adds a walk to the dog's walks.\n  walks_total_length  Returns the total length of the dog's walks.\n  help                Print this message or the help of the given subcommand(s)\n")),(0,r.kt)("p",null,"To run a command, compose a command like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra_cli -- contract DogContract barks\n")),(0,r.kt)("p",null,"It will result with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udc81  INFO : true\n\ud83d\udc81  INFO : Command executed successfully\n")),(0,r.kt)("h2",{id:"creating-and-running-a-scenario"},"Creating and running a scenario"),(0,r.kt)("p",null,"Sometimes we want to run multiple calls one after another. To simplify this, we can create a scenario.\nTo do this implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"Scenario")," trait in the ",(0,r.kt)("inlineCode",{parentName:"p"},"odra-cli")," binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// Checks if the name of the deployed dog matches the provided name.\npub struct DogCheckScenario;\n\nimpl Scenario for DogCheckScenario {\n    fn args(&self) -> Vec<CommandArg> {\n        vec![CommandArg::new(\n            "name",\n            "The name of the dog",\n            NamedCLType::String,\n            false,\n            false\n        )]\n    }\n\n    fn run(\n        &self,\n        env: &HostEnv,\n        container: DeployedContractsContainer,\n        args: ScenarioArgs\n    ) -> Result<(), ScenarioError> {\n        let dog_contract = container.get_ref::<DogContract>(env)?;\n        let test_name = args.get_single::<String>("name")?;\n\n        env.set_gas(50_000_000);\n        let actual_name = dog_contract.try_name()?;\n\n        assert_eq!(test_name, actual_name, "Dog name mismatch");\n\n        Ok(())\n    }\n}\n\nimpl ScenarioMetadata for DogCheckScenario {\n    const NAME: &\'static str = "check";\n    const DESCRIPTION: &\'static str =\n        "Checks if the name of the deployed dog matches the provided name";\n}\n')),(0,r.kt)("p",null,"The example above performs a simple check on the return value of one of the methods.\nOf course, there is no limit to how complex a scenario can be."),(0,r.kt)("p",null,"Remember to add the scenario in the main function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// Main function to run the CLI tool.\npub fn main() {\n    OdraCli::new()\n        .about("Dog contract cli tool")\n        .deploy(DeployDogScript)\n        .contract::<DogContract>()\n        .scenario::<DogCheckScenario>(DogCheckScenario) // New scenario\n        .build()\n        .run();\n}\n')),(0,r.kt)("p",null,"It will appear in the scenario command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra_cli -- scenario\n")),(0,r.kt)("p",null,"Will output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Commands for running user-defined scenarios\n\nUsage: odra_cli scenario <COMMAND>\n\nCommands:\n  check  Checks if the name of the deployed dog matches the provided name\n  help   Print this message or the help of the given subcommand(s)\n")),(0,r.kt)("p",null,"It can be run like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin odra_cli -- scenario check --name Doggy\n")),(0,r.kt)("p",null,"This will output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'thread \'main\' panicked at examples/bin/odra_cli.rs:59:9:\nassertion `left == right` failed: Dog name mismatch\n  left: "Doggy"\n right: "Mantus"\n')))}p.isMDXComponent=!0}}]);