"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[3329],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},58386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:12,description:"Divide your code into modules"},s="Modules",i={unversionedId:"basics/modules",id:"version-2.0.0/basics/modules",title:"Modules",description:"Divide your code into modules",source:"@site/versioned_docs/version-2.0.0/basics/11-modules.md",sourceDirName:"basics",slug:"/basics/modules",permalink:"/docs/2.0.0/basics/modules",draft:!1,tags:[],version:"2.0.0",lastUpdatedAt:1748343707,formattedLastUpdatedAt:"May 27, 2025",sidebarPosition:12,frontMatter:{sidebar_position:12,description:"Divide your code into modules"},sidebar:"tutorialSidebar",previous:{title:"Cross calls",permalink:"/docs/2.0.0/basics/cross-calls"},next:{title:"Native token",permalink:"/docs/2.0.0/basics/native-token"}},l={},u=[{value:"Testing",id:"testing",level:2},{value:"What&#39;s next",id:"whats-next",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"modules"},"Modules"),(0,o.kt)("p",null,"Simply put, modules in Odra let you reuse your code between contracts or even projects. Every contract you\nwrite is also a module, thanks to the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[odra::module]"),' attribute. This means that we can easily rewrite our math\nexample from the previous article, to use a single contract, but still separate our "math" code:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/modules.rs"',title:'"examples/src/features/modules.rs"'},"use crate::features::cross_calls::MathEngine;\nuse odra::prelude::*;\n\n#[odra::module]\npub struct ModulesContract {\n    pub math_engine: SubModule<MathEngine>\n}\n\n#[odra::module]\nimpl ModulesContract {\n    pub fn add_using_module(&self) -> u32 {\n        self.math_engine.add(3, 5)\n    }\n}\n")),(0,o.kt)("admonition",{type:"important"},(0,o.kt)("p",{parentName:"admonition"},"To use a module as a component of another module, you need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"SubModule")," type. This is a special type\nthat crates a keyspace (read more in ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.0.0/advanced/storage-layout"},"Storage Layout"),") and provide access to its public methods.")),(0,o.kt)("p",null,"Note that we didn't need to rewrite the ",(0,o.kt)("inlineCode",{parentName:"p"},"MathEngine")," - we are using the contract from cross calls example as\na module!"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To see how modules can be used in a real-world scenario, check out the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/odradev/odra/blob/release/2.0.0/examples/src/contracts/owned_token.rs"},"OwnedToken example")," in the main Odra repository!")),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"As we don't need to hold addresses, the test is really simple:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/modules.rs"',title:'"examples/src/features/modules.rs"'},"#[cfg(test)]\nmod tests {\n    use super::ModulesContract;\n    use odra::host::{Deployer, NoArgs};\n\n    #[test]\n    fn test_modules() {\n        let test_env = odra_test::env();\n        let modules_contract = ModulesContract::deploy(&test_env, NoArgs);\n        assert_eq!(modules_contract.add_using_module(), 8);\n    }\n}\n")),(0,o.kt)("h2",{id:"whats-next"},"What's next"),(0,o.kt)("p",null,"We will see how to handle native token transfers."))}c.isMDXComponent=!0}}]);