"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[4191],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),v=a,m=u["".concat(l,".").concat(v)]||u[v]||d[v]||s;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},46486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={sidebar_position:9,description:"Creating and emitting Events"},o="Events",i={unversionedId:"basics/events",id:"basics/events",title:"Events",description:"Creating and emitting Events",source:"@site/docs/basics/09-events.md",sourceDirName:"basics",slug:"/basics/events",permalink:"/docs/next/basics/events",draft:!1,tags:[],version:"current",lastUpdatedAt:1756294605,formattedLastUpdatedAt:"Aug 27, 2025",sidebarPosition:9,frontMatter:{sidebar_position:9,description:"Creating and emitting Events"},sidebar:"tutorialSidebar",previous:{title:"Errors",permalink:"/docs/next/basics/errors"},next:{title:"Casper Contract Schema",permalink:"/docs/next/basics/casper-contract-schema"}},l={},c=[{value:"Testing events",id:"testing-events",level:2},{value:"What&#39;s next",id:"whats-next",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"events"},"Events"),(0,a.kt)("p",null,"In the EVM world events are stored as logs within the blockchain's transaction receipts.\nThese logs can be accessed by external applications or other smart contracts to monitor and react to specific events.\nCasper did not support events in versions prior to Casper 2.0 natively, so Odra mimiced this feature,\nby implementing a custom event system called CES - ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/make-software/casper-event-standard"},"Casper Event Standard"),"."),(0,a.kt)("p",null,"In Casper 2.0, events are supported natively. For backward compatibility,\nOdra still supports the CES events, but you can use the native events as well."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Take note, that there is no difference between the CES and native events in terms of the definition.\nThey could be used interchangeably. We will use two different events to show how to use both CES and native events.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/events.rs"',title:'"examples/src/features/events.rs"'},"use odra::prelude::*;\n\n#[odra::module(events = [PartyStarted, NativePartyStarted])]\npub struct PartyContract;\n\n#[odra::event]\npub struct PartyStarted {\n    pub caller: Address,\n    pub block_time: u64\n}\n\n#[odra::event]\npub struct NativePartyStarted {\n    pub caller: Address,\n    pub block_time: u64\n}\n\n#[odra::module]\nimpl PartyContract {\n    pub fn init(&self) {\n        self.env().emit_event(PartyStarted {\n            caller: self.env().caller(),\n            block_time: self.env().get_block_time()\n        });\n        self.env().emit_native_event(NativePartyStarted {\n            caller: self.env().caller(),\n            block_time: self.env().get_block_time()\n        });\n    }\n}\n")),(0,a.kt)("p",null,"We defined a new contract, which emits events called ",(0,a.kt)("inlineCode",{parentName:"p"},"PartyStarted")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NativePartyStarted")," when the contract is deployed.\nTo define a struct to be an event, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"#[odra::event]")," attribute like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/events.rs"',title:'"examples/src/features/events.rs"'},"#[odra::event]\npub struct PartyStarted {\n    pub caller: Address,\n    pub block_time: u64,\n}\n")),(0,a.kt)("p",null,"To emit a CES event, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"emit_event")," function from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractEnv"),", passing the event as an argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/events.rs"',title:'"examples/src/features/events.rs"'},"self.env().emit_event(PartyStarted {\n    caller: self.env().caller(),\n    block_time: self.env().get_block_time()\n});\n")),(0,a.kt)("p",null,"To emit a native event, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"emit_native_event")," function from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ContractEnv"),", passing the event as an argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/events.rs"',title:'"examples/src/features/events.rs"'},"self.env().emit_native_event(NativePartyStarted {\n    caller: self.env().caller(),\n    block_time: self.env().get_block_time()\n});\n")),(0,a.kt)("p",null,"Odra needs to determine all the events at compilation time to register them once the contract is deployed. To register events, add an ",(0,a.kt)("inlineCode",{parentName:"p"},"events")," inner attribute to the struct's ",(0,a.kt)("inlineCode",{parentName:"p"},"#[odra::module]")," attribute. The registered events will also be present in the contract ",(0,a.kt)("a",{parentName:"p",href:"./casper-contract-schema"},(0,a.kt)("inlineCode",{parentName:"a"},"schema")),"."),(0,a.kt)("p",null,"The event collection process is recursive; if your module consists of other modules, and they have already registered their events, you don't need to add them to the parent module."),(0,a.kt)("h2",{id:"testing-events"},"Testing events"),(0,a.kt)("p",null,"Odra's ",(0,a.kt)("inlineCode",{parentName:"p"},"HostEnv")," comes with a few functions which lets you easily test the events that a given contract has emitted:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="examples/src/features/events.rs"',title:'"examples/src/features/events.rs"'},'use super::{PartyContract, PartyStarted};\nuse odra::host::{Deployer, HostEnv, NoArgs};\n\n#[test]\nfn test_party() {\n    let test_env: HostEnv = odra_test::env();\n    let party_contract = PartyContract::deploy(&test_env, NoArgs);\n    assert!(test_env.emitted_event(\n        &party_contract,\n        PartyStarted {\n            caller: test_env.get_account(0),\n            block_time: 0\n        }\n    ));\n    assert!(test_env.emitted_native_event(\n        &party_contract,\n        NativePartyStarted {\n            caller: test_env.get_account(0),\n            block_time: 0\n        }\n    ));\n    // If you do not want to check the exact event, you can use `emitted` function\n    assert!(test_env.emitted(&party_contract, "PartyStarted"));\n    // Or `emitted_native` for the native events\n    assert!(test_env.emitted_native(&party_contract, "NativePartyStarted"));\n    // You can also check how many events were emitted:\n    assert_eq!(test_env.events_count(&party_contract), 1);\n    assert_eq!(test_env.native_events_count(&party_contract), 1);\n}\n')),(0,a.kt)("p",null,"To explore more event testing functions, check the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/odra/2.2.0/odra/host/struct.HostEnv.html"},(0,a.kt)("inlineCode",{parentName:"a"},"HostEnv"))," documentation."),(0,a.kt)("h2",{id:"whats-next"},"What's next"),(0,a.kt)("p",null,"Read the next article to learn how to call other contracts from the contract context."))}d.isMDXComponent=!0}}]);