"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[190],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>p});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),i=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=i(a),p=r,h=m["".concat(u,".").concat(p)]||m[p]||d[p]||o;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var i=2;i<o;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},86318:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const o={slug:"odra-cosmwasm",title:"Odra + CosmWasm",authors:["kpob"],image:"https://github.com/odradev.png"},s=void 0,l={permalink:"/blog/odra-cosmwasm",source:"@site/blog/2023-02-15-odra-cosmos.md",title:"Odra + CosmWasm",description:"In November 2022 we released the first version of the Odra Framework. It's time for the next big step in our framework development - a new platform integration. Meet Odra + CosmWasm.",date:"2023-02-15T00:00:00.000Z",formattedDate:"February 15, 2023",tags:[],readingTime:5.96,hasTruncateMarker:!0,authors:[{name:"Krzysztof Pobiar\u017cyn",title:"Lead Developer",url:"https://github.com/kpob",key:"kpob"}],frontMatter:{slug:"odra-cosmwasm",title:"Odra + CosmWasm",authors:["kpob"],image:"https://github.com/odradev.png"},prevItem:{title:"OpenAI writes ERC20 in Odra",permalink:"/blog/2023-02-27-openai-writes-erc20-in-odra"},nextItem:{title:"EVM at Risc0",permalink:"/blog/evm-at-risc0"}},u={authorsImageUrls:[void 0]},i=[{value:"CosmWasm",id:"cosmwasm",level:2},{value:"Show me your code",id:"show-me-your-code",level:2},{value:"Deploy",id:"deploy",level:2},{value:"Show me your transaction",id:"show-me-your-transaction",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Join us",id:"join-us",level:2}],c={toc:i};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In November 2022 we released ",(0,r.kt)("a",{parentName:"p",href:"/blog/release-020"},"the first version")," of the Odra Framework. It's time for the next big step in our framework development - a new platform integration. Meet Odra + CosmWasm."),(0,r.kt)("h2",{id:"cosmwasm"},"CosmWasm"),(0,r.kt)("p",null,"CosmWasm is a smart contract platform for building dApps on the Cosmos blockchain ecosystem.\nThe platform is designed as a module that can be integrated into the Cosmos SDK, enabling developers who are already building blockchains with the Cosmos SDK to easily incorporate CosmWasm smart contract functionality without the need to modify their existing code."),(0,r.kt)("p",null,"It uses the Rust programming language, so is potentially a perfect candidate for an Odra backend.\nThere are many blockchains like ",(0,r.kt)("a",{parentName:"p",href:"https://docsosmosis.zone/"},"Osmosis"),", ",(0,r.kt)("a",{parentName:"p",href:"https://scrt.network/"},"Secret Network"),", ",(0,r.kt)("a",{parentName:"p",href:"https://www.junonetwork.io/"},"Juno")," that utilize CosmWasm."),(0,r.kt)("h2",{id:"show-me-your-code"},"Show me your code"),(0,r.kt)("p",null,"I would like to write a ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," smart contract that is CosmWasm compatible.\nWhat are the requirements?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"It should store a ",(0,r.kt)("inlineCode",{parentName:"li"},"u32")," value. "),(0,r.kt)("li",{parentName:"ol"},"The initial value it set by the contract deployer."),(0,r.kt)("li",{parentName:"ol"},"The value can be incremented."),(0,r.kt)("li",{parentName:"ol"},"The value can read from the storage."),(0,r.kt)("li",{parentName:"ol"},"The contract can call another contract and increment its counter.")),(0,r.kt)("p",null,"So let's write an Odra module first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=counter.rs",title:"counter.rs"},"use odra::{types::{Address, event::OdraEvent}, Variable, contract_env};\nuse self::events::{Init, ValueUpdated};\n\n#[odra::module]\npub struct Counter {\n    pub value: Variable<u32>\n}\n\n#[odra::module]\nimpl Counter {\n    #[odra(init)]\n    pub fn init(&mut self, value: u32) {\n        self.value.set(value);\n        <Init as OdraEvent>::emit(Init {\n            value,\n        });\n    }\n\n    pub fn increment(&mut self) {\n        let old_value = self.value.get_or_default();\n        let new_value = old_value + 1;\n        self.value.set(new_value);\n        \n        ValueUpdated {\n            old_value,\n            new_value,\n            operator: contract_env::caller()\n        }.emit();\n    }\n\n    pub fn cross_increment(&mut self, counter_address: Address) {\n        CounterRef::at(counter_address).increment();\n    }\n\n    pub fn get_value(&self) -> u32 {\n        self.value.get_or_default()\n    }\n}\n\nmod events {\n    use odra::types::Address;\n\n    #[derive(odra::Event)]\n    pub struct ValueUpdated {\n        pub old_value: u32,\n        pub new_value: u32,\n        pub operator: Address\n    }\n    \n    #[derive(odra::Event)]\n    pub struct Init {\n        pub value: u32,\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn deploy() {\n        let counter = CounterDeployer::init(10);\n        assert_eq!(10, counter.get_value());\n    }\n\n    #[test]\n    fn increment() {\n        let mut counter = CounterDeployer::init(10);\n        counter.increment();\n        assert_eq!(11, counter.get_value());\n    }\n}\n")),(0,r.kt)("p",null,"But wait, I mentioned CosmWasm, did I?"),(0,r.kt)("p",null,"Here the beauty of Odra comes into play."),(0,r.kt)("p",null,"Let's use ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-odra"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo odra build -b cosmos\n")),(0,r.kt)("p",null,"And... that's it, congratulations! We have just written and build our first CosmWasm contract.\nAs you see, it is nothing different from building a contract for Casper. No additional code, we only changed the ",(0,r.kt)("inlineCode",{parentName:"p"},"-b")," flag."),(0,r.kt)("h2",{id:"deploy"},"Deploy"),(0,r.kt)("p",null,"We have just built a wasm file, but is it really a fully functional contract?"),(0,r.kt)("p",null,"As a battlefield let's choose ",(0,r.kt)("a",{parentName:"p",href:"https://www.junonetwork.io/"},"Juno Network")," (if you would like to read more about smart contract development on Juno read this ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@NitroBiell/smart-contract-development-quick-start-on-juno-5dabf6fdcad0"},"Quick Start tutorial"),"). This is an arbitrary choice, each client is built upon a so-called Wasm Zone ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/wasmd"},"wasmd"),", and its interface is alike."),(0,r.kt)("p",null,"Assuming you already know how to interact with Juno testnet, let's move to the fun part."),(0,r.kt)("p",null,"But before we go, to keep things simple, let's prepare a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casey/just"},"justfile"),". It'll make our interactions with the blockchain much easier. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/odradev/odra/blob/feature/cosmos/odra-cosmos/juno-client/justfile"},"full version"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-justfile",metastring:"title=justfile",title:"justfile"},'NODE := "--node https://rpc.uni.juno.deuslabs.fi:443"\nCHAIN_ID := "--chain-id uni-6"\nQUERY_FLAGS := NODE + " " + CHAIN_ID\nTRANSACTION_DEFAULTS := "--gas-prices 0.025ujunox --gas auto --gas-adjustment 1.3 --broadcast-mode block"\nEXEC_FLAGS := NODE + " " + CHAIN_ID + " " + TRANSACTION_DEFAULTS\n\nget-address NAME:\n    junod keys show {{NAME}} | grep -o juno.*\n\nstore-wasm WASM_PATH SENDER:\n    junod tx wasm store \\\n    {{WASM_PATH}} --from {{SENDER}} {{EXEC_FLAGS}}\n\ninit-contract CODE_ID VALUE SENDER CONTRACT_NAME:\n    junod tx wasm instantiate \\\n    {{CODE_ID}} \\\n    `just run-args-parser \'{"name": "init", "args": [ { "value" : {{VALUE}} }]}\'` \\\n    --label \'{{CONTRACT_NAME}}\' --from {{SENDER}} \\\n    --admin `just get-address {{SENDER}}` \\\n    {{EXEC_FLAGS}}\n\nexec-increment ADDRESS SENDER:\n    junod tx wasm execute \\\n    {{ADDRESS}} \\\n    `just run-args-parser \'{"name": "increment"}\'` \\\n    --from {{SENDER}}  \\\n    {{EXEC_FLAGS}}\n\nquery-get-value ADDRESS:\n    junod q wasm contract-state smart {{ADDRESS}} \\\n    `just run-args-parser \'{"name": "get_value"}\'` {{QUERY_FLAGS}}\n')),(0,r.kt)("p",null,"Ok, we are ready to go."),(0,r.kt)("p",null,"First, a CosmWasm contract needs to be stored, technically is not a contract yet. Like a larva waiting to morph into a butterfly (sorry for that)."),(0,r.kt)("p",null,"There are three ways to interact with a contract."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Instantiate - in other words, a constructor call. Once the contract is instantiated, it gets an address."),(0,r.kt)("li",{parentName:"ol"},"Execute - call an entrypoint that modifies the state."),(0,r.kt)("li",{parentName:"ol"},"Query - read the contract's state.")),(0,r.kt)("p",null,"Now, let's take a look at how to do it using the tools we have just prepared."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# args: \n# the path to a wasm file,\n# the name under we store the private key.\njust store-wasm counter.wasm odra\n\n...\nraw_log: \'[{"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgStoreCode"},{"key":"module","value":"wasm"},{"key":"sender","value":"juno1le848rjac00nezzq46v5unxujaltdf270vhtfh"}]},{"type":"store_code","attributes":[{"key":"code_checksum","value":"9fb9e7f39170de2628892ed5eecc556e2487267b30bb2c9656f8c7d1cd9f9a59"},{"key":"code_id","value":"286"}]}]}]\'\n...\ntxhash: 1A8BA520E980C5ABCBCFA6F62D68B6BB82E780544605DE4DD5C6B1C5E966441B\n')),(0,r.kt)("p",null,"Great, our code is successfully stored. Form the logs we can read now the ",(0,r.kt)("inlineCode",{parentName:"p"},"code_id")," which we will use to initialize the contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# args: \n# code id taken from the previous tx, \n# counter initial value, \n# named private key,\n# contract label.\njust init-contract 286 1 odra "My Counter"\n\n...\nraw_log: \'[{"events":[{"type":"instantiate","attributes":[{"key":"_contract_address","value":"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"},{"key":"code_id","value":"286"}]},{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgInstantiateContract"},{"key":"module","value":"wasm"},{"key":"sender","value":"juno1le848rjac00nezzq46v5unxujaltdf270vhtfh"}]},{"type":"wasm","attributes":[{"key":"_contract_address","value":"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"},{"key":"value","value":"1"}]},{"type":"wasm-Init","attributes":[{"key":"_contract_address","value":"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"},{"key":"value","value":"1"}]}]}]\'\n...\ntxhash: 8DC53F95805349C3763CF4AF9527CAB2AEBEC77B240EFD3801C61231D8748F26\n')),(0,r.kt)("p",null,"Fantastic, the contract has been initialized and we have its address - ",(0,r.kt)("inlineCode",{parentName:"p"},"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"),".\nIt's time to increment the counter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# args:\n# contract address taken from the previous tx,\n# named private key\njust exec-increment juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g odra\n\n...\nraw_log: \'[{"events":[{"type":"execute","attributes":[{"key":"_contract_address","value":"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"}]},{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgExecuteContract"},{"key":"module","value":"wasm"},{"key":"sender","value":"juno1le848rjac00nezzq46v5unxujaltdf270vhtfh"}]},{"type":"wasm","attributes":[{"key":"_contract_address","value":"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"},{"key":"action","value":"increment"}]},{"type":"wasm-ValueUpdated","attributes":[{"key":"_contract_address","value":"juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g"},{"key":"old_value","value":"1"},{"key":"new_value","value":"2"},{"key":"operator","value":"juno1le848rjac00nezzq46v5unxujaltdf270vhtfh"}]}]}]\'\n...\ntxhash: 52141844321B8321DA71D073D4FA0865E73C3940153373CA7EF832D15BC3C2B2\n')),(0,r.kt)("p",null,"Finally, we expected, the value to be equal to 2 (the initial value was 1 and we incremented it once)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# args:\n# contract address\njust query-get-value juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g\n\ndata: 2\n")),(0,r.kt)("p",null,"Indeed, as expected the current counter value is 2."),(0,r.kt)("h2",{id:"show-me-your-transaction"},"Show me your transaction"),(0,r.kt)("p",null,"I get it, you don't want to do it all by yourself. So let's take a closer look at one of my transactions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'junod q tx 52141844321B8321DA71D073D4FA0865E73C3940153373CA7EF832D15BC3C2B2 --node https://rpc.uni.juno.deuslabs.fi:443 --chain-id uni-6\n...\nlogs:\n- events:\n  - attributes:\n    - key: _contract_address\n      value: juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g\n    type: execute\n  - attributes:\n    - key: action\n      value: /cosmwasm.wasm.v1.MsgExecuteContract\n    - key: module\n      value: wasm\n    - key: sender\n      value: juno1le848rjac00nezzq46v5unxujaltdf270vhtfh\n    type: message\n  - attributes:\n    - key: _contract_address\n      value: juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g\n    - key: action\n      value: increment\n    type: wasm\n  - attributes:\n    - key: _contract_address\n      value: juno10yszsgq4460a57ztuw943h5j3c9l0eyx3algzq080gatl0thecls5ttk7g\n    - key: old_value\n      value: "1"\n    - key: new_value\n      value: "2"\n    - key: operator\n      value: juno1le848rjac00nezzq46v5unxujaltdf270vhtfh\n    type: wasm-ValueUpdated\n...\ntxhash: 52141844321B8321DA71D073D4FA0865E73C3940153373CA7EF832D15BC3C2B2\n')),(0,r.kt)("p",null,"If you are familiar Cosmos ecosystem, you can see that there is an attribute containing\nthe performed action (",(0,r.kt)("inlineCode",{parentName:"p"},"increment"),") (If there were some parameters, they would be included in this attribute).\nWe can find here also our ",(0,r.kt)("inlineCode",{parentName:"p"},"ValueUpdated")," event with its arguments ",(0,r.kt)("inlineCode",{parentName:"p"},"old_value"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"new_value")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"operator"),"."),(0,r.kt)("p",null,"Wow, we have it, everything worked as intended!"),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Wouldn't it be great to replace ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/casper-ecosystem/erc20/tree/master/erc20/src"},"Casper Erc20")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/tree/main/contracts/cw20-base/src"},"Cosmos Erc20")," with a super-simple\nsingle ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/odradev/odra/blob/release/0.2.0/examples/src/erc20.rs"},"Odra Erc20")," implementation?"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," contract is just a POC, and there is still a long road ahead of us.\nThis simple example shows that features like storage, events, and cross-contract calls\ncan be unified in a simple readable interface."),(0,r.kt)("p",null,"CosmWasm integration hasn't been published yet, but if you want to experiment by yourself,\ncheck our GitHub (don't forget to update cargo-odra as well)."),(0,r.kt)("h2",{id:"join-us"},"Join us"),(0,r.kt)("p",null,"Interested?"),(0,r.kt)("p",null,"Join ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/Mm5ABc9P8k"},"our Discord"),", ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/odradev"},"our Twitter")," or write us\nat ",(0,r.kt)("a",{parentName:"p",href:"mailto:contact@odra.dev"},"contact@odra.dev"),"."))}d.isMDXComponent=!0}}]);