"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[9060],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,g=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},34961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r={},i="Delegating CSPR to Validators",l={unversionedId:"advanced/delegating-cspr",id:"version-2.3.0/advanced/delegating-cspr",title:"Delegating CSPR to Validators",description:"Casper 2.0 introduced a feature that allows delegating CSPR tokens to validators by contracts.",source:"@site/versioned_docs/version-2.3.0/advanced/08-delegating-cspr.md",sourceDirName:"advanced",slug:"/advanced/delegating-cspr",permalink:"/docs/2.3.0/advanced/delegating-cspr",draft:!1,tags:[],version:"2.3.0",lastUpdatedAt:1756362595,formattedLastUpdatedAt:"Aug 28, 2025",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Signatures",permalink:"/docs/2.3.0/advanced/signatures"},next:{title:"Backends",permalink:"/docs/2.3.0/category/backends"}},s={},d=[{value:"Sample implementation",id:"sample-implementation",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Testing",id:"testing",level:2}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"delegating-cspr-to-validators"},"Delegating CSPR to Validators"),(0,o.kt)("p",null,"Casper 2.0 introduced a feature that allows delegating CSPR tokens to validators by contracts.\nThis can be useful, especially if you want to implement some kind of liquid staking solution.\nThat's why Odra since v2.0.0 provides a way to delegate CSPR tokens to validators by contracts."),(0,o.kt)("h2",{id:"sample-implementation"},"Sample implementation"),(0,o.kt)("p",null,"The following code shows how to implement a simple contract that allows delegating CSPR tokens to a validator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/src/features/validators.rs",title:"examples/src/features/validators.rs"},"use odra::{\n    casper_types::{PublicKey, U512},\n    prelude::*\n};\n\n#[odra::module]\npub struct ValidatorsContract {\n    /// In this variable we store the validator's public key, this is the only way we can identify the validator\n    validator: Var<PublicKey>\n}\n\n/// Implementation of the TestingContract\n#[odra::module]\nimpl ValidatorsContract {\n    /// Initializes the contract with the validator's public key\n    pub fn init(&mut self, validator: PublicKey) {\n        self.validator.set(validator);\n    }\n\n    /// Stake the amount of tokens\n    #[odra(payable)]\n    pub fn stake(&mut self) {\n        // Get the amount of tokens attached to the call\n        let amount = self.env().attached_value();\n        if amount.is_zero() {\n            self.env().revert(ValError::InsufficientBalance);\n        }\n\n        // Use the ContractEnv's delegate method to delegate the tokens to the validator\n        self.env().delegate(self.validator.get().unwrap(), amount);\n    }\n\n    /// Undelegate the amount from the validator\n    pub fn unstake(&mut self, amount: U512) {\n        self.env().undelegate(self.validator.get().unwrap(), amount);\n    }\n\n    /// Withdraw the amount from the validator\n    pub fn withdraw(&mut self, amount: U512) {\n        self.env().transfer_tokens(&self.env().caller(), &amount);\n    }\n\n    ...\n}\n")),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("p",null,"The above example can be a good starting point for implementing a liquid staking solution. The main things to\nremember are the new api methods in ContractEnv:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn delegate(&self, validator: PublicKey, amount: U512);\npub fn undelegate(&self, validator: PublicKey, amount: U512);\npub fn delegated_amount(&self, validator: PublicKey) -> U512;\n")),(0,o.kt)("p",null,"As you can see, we identify the validator by its public key. Funds delegated to the validator are assigned to the\ncalling contract."),(0,o.kt)("p",null,"Remember, that the delegation and undelegation takes some time, depending on the configuration of the blockchain - it's\nnot instant. For example in the Casper mainnet, the delegation takes 1 era and the undelegation takes 7 eras."),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"It is possible to test the delegation and undelegation of tokens in the contract. The following code shows how to do it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/src/features/validators.rs",title:"examples/src/features/validators.rs"},"...\n        let test_env = odra_test::env();\n        let auction_delay = test_env.auction_delay();\n        let unbonding_delay = test_env.unbonding_delay();\n\n        test_env.set_caller(test_env.get_account(0));\n        let mut staking = ValidatorsContract::deploy(\n            &test_env,\n            ValidatorsContractInitArgs {\n                validator: test_env.get_validator(0)\n            }\n        );\n\n        let initial_account_balance = test_env.balance_of(&test_env.get_account(0));\n\n        // Stake some amount\n        let staking_amount = U512::from(1_000_000_000_000u64);\n        staking.with_tokens(staking_amount).stake();\n        assert_eq!(staking.currently_delegated_amount(), staking_amount);\n        assert_eq!(\n            test_env.balance_of(&test_env.get_account(0)),\n            initial_account_balance - staking_amount\n        );\n\n        // Advance time, run auctions and give off rewards\n        test_env.advance_with_auctions(auction_delay * 2);\n\n        // Check that the amount is greater than the staking amount\n        let staking_with_reward = staking.currently_delegated_amount();\n        assert!(staking_with_reward > staking_amount);\n\n...\n")),(0,o.kt)("p",null,"You can see, that we use the new methods from HostEnv, namely:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    fn advance_with_auctions(&self, time_diff: u64);\n    fn auction_delay(&self) -> u64; \n    fn unbonding_delay(&self) -> u64;\n    fn delegated_amount(&self, delegator: Address, validator: PublicKey) -> U512;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"advance_with_auctions")," works in a similar way to ",(0,o.kt)("inlineCode",{parentName:"p"},"advance_block_time"),", but it also runs the auctions and gives off\nrewards. The ",(0,o.kt)("inlineCode",{parentName:"p"},"auction_delay")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"unbonding_delay")," methods return the values of the auction and unbonding delays\nspecific to the network or backend."),(0,o.kt)("p",null,"We used ",(0,o.kt)("inlineCode",{parentName:"p"},"currently_delegated_amount")," in the example, it uses ",(0,o.kt)("inlineCode",{parentName:"p"},"delegated_amount")," method from ContractEnv, but it is also\npossible to query this information from the HostEnv using ",(0,o.kt)("inlineCode",{parentName:"p"},"delegated_amount")," method."))}c.isMDXComponent=!0}}]);