"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[4107],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,h=p["".concat(l,".").concat(f)]||p[f]||u[f]||r;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},88808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:10},s="Deploying a Token on Casper Livenet",i={unversionedId:"tutorials/deploying-on-casper",id:"version-2.0.0/tutorials/deploying-on-casper",title:"Deploying a Token on Casper Livenet",description:"In this tutorial, we will take the token we created in",source:"@site/versioned_docs/version-2.0.0/tutorials/deploying-on-casper.md",sourceDirName:"tutorials",slug:"/tutorials/deploying-on-casper",permalink:"/docs/2.0.0/tutorials/deploying-on-casper",draft:!1,tags:[],version:"2.0.0",lastUpdatedAt:1748343707,formattedLastUpdatedAt:"May 27, 2025",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Odra for Solidity developers",permalink:"/docs/2.0.0/tutorials/odra-solidity"},next:{title:"Odra CLI",permalink:"/docs/2.0.0/tutorials/odra-cli"}},l={},c=[{value:"Casper Wallet",id:"casper-wallet",level:2},{value:"Getting tokens",id:"getting-tokens",level:2},{value:"Odra Livenet",id:"odra-livenet",level:2},{value:"Cspr.live",id:"csprlive",level:2},{value:"Transferring Tokens using Casper Wallet",id:"transferring-tokens-using-casper-wallet",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deploying-a-token-on-casper-livenet"},"Deploying a Token on Casper Livenet"),(0,o.kt)("p",null,"In this tutorial, we will take the token we created in\nthe previous one and deploy it on the Livenet Casper network,\nusing the Odra Livenet backend."),(0,o.kt)("p",null,"We will also take a look at the tools that Casper Ecosystem\nprovides to interact with our newly deployed token."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Most of this tutorial will work with any Casper contract.")),(0,o.kt)("h2",{id:"casper-wallet"},"Casper Wallet"),(0,o.kt)("p",null,"We will be using Casper Wallet to do some tasks in this tutorial.\nTo install it, please follow the instructions on the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.casperwallet.io/"},"official website"),"."),(0,o.kt)("p",null,"After setting up the wallet, extract the private key of the account\nyou want to use for our testing.\nYou can do this by clicking on the Menu > Download account keys."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"You are solely responsible for the security of your private keys.\nWe recommend creating a new account for the testing purposes.")),(0,o.kt)("p",null,"Why do we need the private key? We will use it in Odra to deploy\nour contract to the Casper network using Livenet backend."),(0,o.kt)("h2",{id:"getting-tokens"},"Getting tokens"),(0,o.kt)("p",null,"To deploy the contract on the Livenet, we need to have some CSPR.\nThe easiest way to get them is to use the faucet, which will send\nus 1000 CSPR for free. Unfortunately, only on the Testnet."),(0,o.kt)("p",null,"To use the faucet, go to the ",(0,o.kt)("a",{parentName:"p",href:"https://testnet.cspr.live/tools/faucet"},"Casper Testnet Faucet"),'.\nLog in using your Casper Wallet account and click on the "Request Tokens" button.'),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"One account can request tokens only once. If you run out of tokens, you can\neither ask someone in the Casper community to send you some, or simply create a new account\nin the wallet.")),(0,o.kt)("p",null,"Now, when we have the tokens, we can deploy the contract. Let's do it using Odra!"),(0,o.kt)("h2",{id:"odra-livenet"},"Odra Livenet"),(0,o.kt)("p",null,"Odra Livenet is described in detail in the\n",(0,o.kt)("a",{parentName:"p",href:"../backends/livenet"},"backends section")," of this documentation.\nWe will then briefly describe how to use set it up in this tutorial."),(0,o.kt)("p",null,"In your contract code, create a new file in the bin folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="bin/our_token_livenet.rs"',title:'"bin/our_token_livenet.rs"'},'//! Deploys a new OurToken contract on the Casper livenet and mints some tokens for the tutorial\n//! creator.\nuse std::str::FromStr;\n\nuse odra::casper_types::U256;\nuse odra::host::{Deployer, HostEnv, HostRef, HostRefLoader};\nuse odra::prelude::Address;\nuse ourcoin::token::{OurToken, OurToken, OurTokenInitArgs};\n\nfn main() {\n    // Load the Casper livenet environment.\n    let env = odra_casper_livenet_env::env();\n\n    // Caller is the deployer and the owner of the private key.\n    let owner = env.caller();\n    // Just some random address...\n    let recipient = "hash-48bd92253a1370d1d913c56800296145547a243d13ff4f059ba4b985b1e94c26";\n    let recipient = Address::from_str(recipient).unwrap();\n\n    // Deploy new contract.\n    let mut token = deploy_our_token(&env);\n    println!("Token address: {}", token.address().to_string());\n\n    // Propose minting new tokens.\n    env.set_gas(1_000_000_000u64);\n    token.propose_new_mint(recipient, U256::from(1_000));\n\n    // Vote, we are the only voter.\n    env.set_gas(1_000_000_000u64);\n    token.vote(true, U256::from(1_000));\n\n    // Let\'s advance the block time by 11 minutes, as\n    // we set the voting time to 10 minutes.\n    // OH NO! It is the Livenet, so we need to wait real time...\n    // Hopefully you are not in a hurry.\n    env.advance_block_time(11 * 60 * 1000);\n\n    // Tally the votes.\n    env.set_gas(1_500_000_000u64);\n    token.tally();\n\n    // Check the balances.\n    println!("Owner\'s balance: {:?}", token.balance_of(&owner));\n    println!(\n        "Tutorial creator\'s balance: {:?}",\n        token.balance_of(&recipient)\n    );\n}\n\n/// Deploys a contract.\npub fn deploy_our_token(env: &HostEnv) -> OurTokenHostRef {\n    let name = String::from("OurToken");\n    let symbol = String::from("OT");\n    let decimals = 0;\n    let initial_supply = U256::from(1_000);\n\n    let init_args = OurTokenInitArgs {\n        name,\n        symbol,\n        decimals,\n        initial_supply,\n    };\n\n    env.set_gas(300_000_000_000u64);\n    OurToken::deploy(env, init_args)\n}\n\n/// Loads a contract. Just in case you need to load an existing contract later...\nfn _load_our_token(env: &HostEnv) -> OurTokenHostRef {\n    let address = "hash-XXXXX";\n    let address = Address::from_str(address).unwrap();\n    OurToken::load(env, address)\n}\n')),(0,o.kt)("p",null,"In your ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file, we need to add a new dependency, a feature and\nregister the new binary. In the end, it should look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[package]\nname = "ourcoin"\nversion = "0.1.0"\nedition = "2021"\n\n[dependencies]\nodra = { version = "1.4.0", features = [], default-features = false }\nodra-modules = { version = "1.4.0", features = [], default-features = false }\nodra-casper-livenet-env = { version = "1.4.0", optional = true }\n\n[dev-dependencies]\nodra-test = { version = "1.4.0", features = [], default-features = false }\n\n[build-dependencies]\nodra-build = { version = "1.4.0", features = [], default-features = false }\n\n[features]\ndefault = []\nlivenet = ["odra-casper-livenet-env"]\n\n[[bin]]\nname = "ourcoin_build_contract"\npath = "bin/build_contract.rs"\ntest = false\n\n[[bin]]\nname = "ourcoin_build_schema"\npath = "bin/build_schema.rs"\ntest = false\n\n[[bin]]\nname = "our_token_livenet"\npath = "bin/our_token_livenet.rs"\nrequired-features = ["livenet"]\n\n[profile.release]\ncodegen-units = 1\nlto = true\n\n[profile.dev.package."*"]\nopt-level = 3\n')),(0,o.kt)("p",null,"Finally, add the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file with the following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},"# Path to the secret key of the account that will be used to deploy the contracts.\nODRA_CASPER_LIVENET_SECRET_KEY_PATH=folder_with_your_secret_key/secret_key_file.pem\n\n# RPC address of the node that will be used to deploy the contracts.\nODRA_CASPER_LIVENET_NODE_ADDRESS=http://138.201.80.141:7777\n\n# Chain name of the network.\nODRA_CASPER_LIVENET_CHAIN_NAME=casper-test\n")),(0,o.kt)("p",null,"Of course, you need to replace the secret key's path\nwith the path to the secret key file you downloaded from the Casper Wallet."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"One of the problems you may encounter is that the node you are using\nwill be down or will not accept your calls. In this case, you will\nhave to find and use another node IP address.")),(0,o.kt)("p",null,"Now, we will run our code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --bin our_token_livenet --features livenet\n")),(0,o.kt)("p",null,"If everything is set up correctly, you should see the output similar to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'     Running `target/debug/our_token_livenet`\n\ud83d\udc81  INFO : Deploying "OurToken".\n\ud83d\udc81  INFO : Found wasm under "wasm/OurToken.wasm".\n\ud83d\ude44  WAIT : Waiting 15s for "e6b34772ebc3682702674102db87c633b0544242eafd5944e680371be4ea1227".\n\ud83d\ude44  WAIT : Waiting 15s for "e6b34772ebc3682702674102db87c633b0544242eafd5944e680371be4ea1227".\n\ud83d\udc81  INFO : Deploy "e6b34772ebc3682702674102db87c633b0544242eafd5944e680371be4ea1227" successfully executed.\n\ud83d\udc81  INFO : Contract "hash-565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857" deployed.\n\nToken address: hash-565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857\n\n\ud83d\udc81  INFO : Calling "hash-565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857" with entrypoint "propose_new_mint".\n\ud83d\ude44  WAIT : Waiting 15s for "2f89cc96b6f8f05b88f8e75bef3a2f0ba39e9ab761693afff49e4112aa9d7361".\n\ud83d\ude44  WAIT : Waiting 15s for "2f89cc96b6f8f05b88f8e75bef3a2f0ba39e9ab761693afff49e4112aa9d7361".\n\ud83d\udc81  INFO : Deploy "2f89cc96b6f8f05b88f8e75bef3a2f0ba39e9ab761693afff49e4112aa9d7361" successfully executed.\n\ud83d\udc81  INFO : Calling "hash-565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857" with entrypoint "vote".\n\ud83d\ude44  WAIT : Waiting 15s for "aca9ae847cfcb97c81b4c64992515ff14d6f63a60f7c141558463f5b752058a5".\n\ud83d\ude44  WAIT : Waiting 15s for "aca9ae847cfcb97c81b4c64992515ff14d6f63a60f7c141558463f5b752058a5".\n\ud83d\udc81  INFO : Deploy "aca9ae847cfcb97c81b4c64992515ff14d6f63a60f7c141558463f5b752058a5" successfully executed.\n\ud83d\udc81  INFO : advance_block_time called - Waiting for 660000 ms\n\ud83d\udc81  INFO : Calling "hash-565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857" with entrypoint "tally".\n\ud83d\ude44  WAIT : Waiting 15s for "223b135edbeadd88425183abaec0b0afb7d7770ffc57eba9054e3ea60e9e9cef".\n\ud83d\ude44  WAIT : Waiting 15s for "223b135edbeadd88425183abaec0b0afb7d7770ffc57eba9054e3ea60e9e9cef".\n\ud83d\udc81  INFO : Deploy "223b135edbeadd88425183abaec0b0afb7d7770ffc57eba9054e3ea60e9e9cef" successfully executed.\n\nOwner\'s balance: 1000\nTutorial creator\'s balance: 1000\n')),(0,o.kt)("p",null,"Congratulations, your contract is now deployed on the Casper network!\nBefore we move on, note the address of the token!"),(0,o.kt)("p",null,"We will use it in the next section to interact with the token. In our case it is\n",(0,o.kt)("inlineCode",{parentName:"p"},"hash-565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857"),"."),(0,o.kt)("h2",{id:"csprlive"},"Cspr.live"),(0,o.kt)("p",null,"The first thing we will do is to explore Casper's network block explorer,\n",(0,o.kt)("a",{parentName:"p",href:"https://cspr.live/"},"cspr.live"),". We can put the address of our token in the search bar\nto find it."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you deployed your contract on the Testnet, remember to make sure that the Testnet\nnetwork is selected in the dropdown menu in the top right corner.")),(0,o.kt)("p",null,"If everything is set up correctly, you should see the contract package's details.\nBesides the owner, keys etc., you can also see the contract's metdata, if it\nwas developed using a standard that cspr.live supports."),(0,o.kt)("p",null,"Indeed, we can see that it detected that our contract is a CEP-18 token!\nWe see the name, symbol and total supply.\nAll the mentions of the contract on the website will use the token name instead\nof the contract address."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"contract.png",src:n(64569).Z,width:"444",height:"417"})),(0,o.kt)("p",null,"Additionally, on the Token Txs tab, we can see the transactions that happened\nwith the token. We can see the minting transaction we did in the previous section\nand transfers done during the voting process."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"transactions.png",src:n(4603).Z,width:"605",height:"343"})),(0,o.kt)("p",null,"If we click on one of the accounts that recieved the tokens, we will go to the\naccount page. Here, on the Tokens tab, we can see all the tokens that the account\nhas - and OurToken is one of them!"),(0,o.kt)("p",null,"If you wish, you can check the status of the contract deployed during the development\nof this tutorial ",(0,o.kt)("a",{parentName:"p",href:"https://testnet.cspr.live/contract-package/565bd0bde39c8c3dd79e49c037e05eac8add2b2193e86a91a6bac068e0de7857"},"here"),"."),(0,o.kt)("h2",{id:"transferring-tokens-using-casper-wallet"},"Transferring Tokens using Casper Wallet"),(0,o.kt)("p",null,"Casper wallet can do much more than just logging in to the faucet, exporting\nthe private keys and transferring CSPR. It can also interact with the contracts\ndeployed on the network."),(0,o.kt)("p",null,"If you deployed the contract and left some OT tokens to yourself, you should see\nthem in the Casper Wallet window."),(0,o.kt)("p",null,"You should also be able to transfer them to another account!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"wallet.png",src:n(42356).Z,width:"351",height:"591"})),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"We've successfully deployed a token on the Casper network and interacted with it\nusing the Odra backend and Casper Wallet. We've also learned how to use the\ncspr.live block explorer to check the status of your contract."),(0,o.kt)("p",null,"Odra, Cspr.live and Casper Wallet are just a few of the tools that the Casper ecosystem\nprovides. Feel free to explore them on ",(0,o.kt)("a",{parentName:"p",href:"https://casperecosystem.io/"},"casperecosystem.io"),"."))}u.isMDXComponent=!0},64569:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/contract-4a6ad767dffcbb5b1b7e793447a41680.png"},4603:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/transactions-3d96ebac6e49c7b9bee5ef5bc14a4ef4.png"},42356:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/wallet-d80c30c75d661377a4d31b1c8fb24664.png"}}]);